{"version":3,"sources":["components/CodeScanner/index.js","store/types.js","containers/Scanner/index.js","store/actions.js","containers/ScanResult/index.js","routes.js","App.js","store/reducers/app.js","store/reducers/qr.js","index.js"],"names":["CodeScanner","uniqueId","onSuccess","onError","qrbox","width","useEffect","scanner","window","Html5Qrcode","start","facingMode","fps","stop","catch","err","console","log","id","style","margin","SET_SCAN_RESULT","Scanner","dispatch","useDispatch","lg","r","type","payload","ScanResult","scanResult","useSelector","state","qr","result","onClick","Routes","path","exact","to","App","setConfiguration","maxScreenClass","basename","initialState","store","createStore","combineReducers","app","action","compose","applyMiddleware","thunk","ReactDOM","render","document","getElementById"],"mappings":"oMA2BeA,EAxBK,SAAC,GAAkD,IAAjDC,EAAgD,EAAhDA,SAAUC,EAAsC,EAAtCA,UAAWC,EAA2B,EAA3BA,QAASC,EAAkB,EAAlBA,MAAOC,EAAW,EAAXA,MAavD,OAZAC,qBAAU,WACN,IAAMC,EAAU,IAAIC,OAAOC,YAAYR,GAAU,GAMjD,OALAM,EAAQG,MAAM,CAACC,WAAY,eAAgB,CACvCC,IAAK,EACLR,SACDF,EAAWC,GAEP,kBAAMI,EACRM,OACAC,OAAM,SAAAC,GAAG,OAAEC,QAAQC,IAAI,qCAAsCF,SACpE,CAACd,EAAUE,EAASD,EAAWE,IAE1B,qBAAKc,GAAIjB,EAAUkB,MAAO,CAACd,MAAM,GAAD,OAAKA,GAAY,IAAjB,MAA0Be,OAAQ,WChBhEC,EAAkB,qB,YCsBhBC,EAhBC,WACZ,IAAMC,EAAWC,cACjB,OAAQ,qCACJ,cAAC,MAAD,UACI,cAAC,MAAD,CAAKC,GAAI,GAAT,SACI,yDAGR,cAAC,MAAD,UACI,cAAC,MAAD,CAAKA,GAAI,GAAT,SACI,cAAC,EAAD,CAAaxB,SAAU,UAAWC,UAAW,SAAAwB,GAAC,OAAEH,ECbrD,CACHI,KAAMN,EACNO,QDWiFF,KAAKtB,MAAO,IAAKC,MAAO,IAAKF,QAAS,uBEEhH0B,EAbI,WACf,IAAMC,EAAaC,aAAY,SAAAC,GAAK,OAAEA,EAAMC,GAAGC,UACzCX,EAAWC,cACjB,OAAO,qCACH,eAAC,MAAD,2BACkBM,KAElB,cAAC,MAAD,UACI,wBAAQK,QAAS,kBAAIZ,EDHtB,CACHI,KAAMN,EACNO,QAAS,QCCL,yBCPCQ,EAAS,WAClB,IAAMN,EAAaC,aAAY,SAAAC,GAAK,OAAEA,EAAMC,GAAGC,UAC/C,OAAO,eAAC,IAAD,WACH,cAAC,IAAD,CAAOG,KAAM,QAASC,OAAK,EAA3B,SACKR,EAAW,cAAC,IAAD,CAAUS,GAAI,YAAc,cAAC,EAAD,MAE5C,cAAC,IAAD,CAAOF,KAAM,UAAWC,OAAK,EAA7B,SACMR,EAAqC,cAAC,EAAD,IAA1B,cAAC,IAAD,CAAUS,GAAI,YAE/B,cAAC,IAAD,CAAUA,GAAI,cCXTC,EAAM,WAKjB,OAJAC,2BAAiB,CACfC,eAAgB,OAGX,cAAC,YAAD,UACL,cAAC,IAAD,CAAYC,SAAS,aAArB,SACE,cAAC,EAAD,S,QCXAC,EAAe,G,QCEfA,EAAe,CACjBV,OAAQ,M,QCONW,EAAQC,YAAYC,YAAgB,CACtCC,IFPsB,WAAmC,IAAlChB,EAAiC,uDAAzBY,EAAcK,EAAW,uCAE3C,OADLA,EAAOtB,KACKK,GEMpBC,GDNqB,WAAmC,IAAlCD,EAAiC,uDAAzBY,EAAcK,EAAW,uCACvD,OAAQA,EAAOtB,MACX,KAAKN,EACD,OAAO,2BACAW,GADP,IAEIE,OAAQe,EAAOrB,UAEvB,QAAS,OAAOI,MCApBkB,YACAC,YACIC,OAIRC,IAASC,OACL,cAAC,IAAD,CAAUT,MAAOA,EAAjB,SAAwB,cAAC,EAAD,MACxBU,SAASC,eAAe,W","file":"static/js/main.3d4eddfe.chunk.js","sourcesContent":["import React, {useEffect} from \"react\";\nimport PropTypes from 'prop-types';\n\nconst CodeScanner = ({uniqueId, onSuccess, onError, qrbox, width}) => {\n    useEffect(()=>{\n        const scanner = new window.Html5Qrcode(uniqueId, false)\n        scanner.start({facingMode: \"environment\"}, {\n            fps: 3,\n            qrbox\n        }, onSuccess, onError)\n\n        return () => scanner\n            .stop()\n            .catch(err=>console.log('Error during CodeScanner unmount. ', err))\n    },[uniqueId, onError, onSuccess, qrbox])\n\n    return <div id={uniqueId} style={{width: `${width?width:500}px`, margin: \"auto\"}}/>\n}\n\nCodeScanner.propTypes = {\n    uniqueId: PropTypes.string,\n    onSuccess: PropTypes.func,\n    onError: PropTypes.func,\n    qrbox: PropTypes.number,\n    width: PropTypes.number\n}\n\nexport default CodeScanner","export const SET_SCAN_RESULT = \"SCANNER/SET_RESULT\"","import CodeScanner from \"../../components/CodeScanner\";\nimport {Row, Col} from \"react-grid-system\";\nimport React from \"react\";\nimport {setQrScanResult} from \"../../store/actions\";\nimport {useDispatch} from \"react-redux\";\n\nconst Scanner = () => {\n    const dispatch = useDispatch()\n    return  <>\n        <Row>\n            <Col lg={12}>\n                <h1>COCKTAMP QR SCANNER</h1>\n            </Col>\n        </Row>\n        <Row>\n            <Col lg={12}>\n                <CodeScanner uniqueId={\"camera1\"} onSuccess={r=>dispatch(setQrScanResult(r))} qrbox={190} width={300} onError={()=>{}} />\n            </Col>\n        </Row>\n    </>\n}\n\nexport default Scanner","import {SET_SCAN_RESULT} from \"./types\";\n\nexport function setQrScanResult(result){\n    return {\n        type: SET_SCAN_RESULT,\n        payload: result\n    }\n}\n\nexport function clearScanResult() {\n    return {\n        type: SET_SCAN_RESULT,\n        payload: null\n    }\n}","import React from \"react\";\nimport {Row} from \"react-grid-system\";\nimport {useDispatch, useSelector} from \"react-redux\";\nimport {clearScanResult} from \"../../store/actions\";\n\nconst ScanResult = () => {\n    const scanResult = useSelector(state=>state.qr.result)\n    const dispatch = useDispatch()\n    return <>\n        <Row>\n            Scan result: {scanResult}\n        </Row>\n        <Row>\n            <button onClick={()=>dispatch(clearScanResult())}>Clear</button>\n        </Row>\n    </>\n}\n\nexport default ScanResult","import React from \"react\";\nimport {Switch, Route, Redirect} from \"react-router-dom\";\nimport Scanner from \"./containers/Scanner\";\nimport {useSelector} from \"react-redux\";\nimport ScanResult from \"./containers/ScanResult\";\n\nexport const Routes = () => {\n    const scanResult = useSelector(state=>state.qr.result)\n    return <Switch>\n        <Route path={'/scan'} exact>\n            {scanResult?<Redirect to={'/result'} />:<Scanner />}\n        </Route>\n        <Route path={'/result'} exact>\n            {!scanResult?<Redirect to={'/scan'} />:<ScanResult />}\n        </Route>\n        <Redirect to={'/scan'} />\n    </Switch>\n}","import React from \"react\";\nimport {setConfiguration, Container} from 'react-grid-system'\nimport {HashRouter} from 'react-router-dom'\nimport {Routes} from \"./routes\";\nexport const App = () => {\n  setConfiguration({\n    maxScreenClass: \"lg\"\n  })\n\n  return <Container>\n    <HashRouter basename=\"/qrscanner\">\n      <Routes />\n    </HashRouter>\n  </Container>\n}\n","const initialState = {\n\n}\n\nexport const appReducer = (state = initialState, action) => {\n    switch (action.type) {\n        default: return state\n    }\n}","import {SET_SCAN_RESULT} from \"../types\";\n\nconst initialState = {\n    result: null\n}\n\nexport const qrReducer = (state = initialState, action) => {\n    switch (action.type) {\n        case SET_SCAN_RESULT:\n            return {\n                ...state,\n                result: action.payload\n            }\n        default: return state\n    }\n}","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport {App} from './App';\nimport {applyMiddleware, combineReducers, compose, createStore} from \"redux\";\nimport {appReducer} from \"./store/reducers/app\";\nimport {qrReducer} from \"./store/reducers/qr\";\nimport thunk from \"redux-thunk\";\nimport {Provider} from \"react-redux\";\n\nconst store = createStore(combineReducers({\n    app: appReducer,\n    qr: qrReducer\n}), compose(\n    applyMiddleware(\n        thunk\n    )\n))\n\nReactDOM.render(\n    <Provider store={store}><App /></Provider>,\n    document.getElementById('root')\n);\n"],"sourceRoot":""}